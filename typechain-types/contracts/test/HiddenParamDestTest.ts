/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface HiddenParamDestTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "funcNoParamsExplicit"
      | "funcOneParamExplicit"
      | "funcTwoParamsExplicit"
      | "twoParamFuncNoParams"
      | "twoParamFuncOneParam"
      | "twoParamFuncTwoParams"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AllGood"): EventFragment;

  encodeFunctionData(
    functionFragment: "funcNoParamsExplicit",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "funcOneParamExplicit",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "funcTwoParamsExplicit",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "twoParamFuncNoParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "twoParamFuncOneParam",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "twoParamFuncTwoParams",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "funcNoParamsExplicit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "funcOneParamExplicit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "funcTwoParamsExplicit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twoParamFuncNoParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twoParamFuncOneParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twoParamFuncTwoParams",
    data: BytesLike
  ): Result;
}

export namespace AllGoodEvent {
  export type InputTuple = [happy: boolean];
  export type OutputTuple = [happy: boolean];
  export interface OutputObject {
    happy: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HiddenParamDestTest extends BaseContract {
  connect(runner?: ContractRunner | null): HiddenParamDestTest;
  waitForDeployment(): Promise<this>;

  interface: HiddenParamDestTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  funcNoParamsExplicit: TypedContractMethod<
    [
      _actualUint256_1: BigNumberish,
      _actualUint256_2: BigNumberish,
      _actualAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  funcOneParamExplicit: TypedContractMethod<
    [
      _val: BigNumberish,
      _actualUint256_1: BigNumberish,
      actualUint256_2: BigNumberish,
      actualAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  funcTwoParamsExplicit: TypedContractMethod<
    [
      _val1: BigNumberish,
      _val2: BigNumberish,
      _actualUint256_1: BigNumberish,
      _actualUint256_2: BigNumberish,
      _actualAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  twoParamFuncNoParams: TypedContractMethod<[], [void], "nonpayable">;

  twoParamFuncOneParam: TypedContractMethod<
    [_val: BigNumberish],
    [void],
    "nonpayable"
  >;

  twoParamFuncTwoParams: TypedContractMethod<
    [_val1: BigNumberish, _val2: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "funcNoParamsExplicit"
  ): TypedContractMethod<
    [
      _actualUint256_1: BigNumberish,
      _actualUint256_2: BigNumberish,
      _actualAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "funcOneParamExplicit"
  ): TypedContractMethod<
    [
      _val: BigNumberish,
      _actualUint256_1: BigNumberish,
      actualUint256_2: BigNumberish,
      actualAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "funcTwoParamsExplicit"
  ): TypedContractMethod<
    [
      _val1: BigNumberish,
      _val2: BigNumberish,
      _actualUint256_1: BigNumberish,
      _actualUint256_2: BigNumberish,
      _actualAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "twoParamFuncNoParams"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "twoParamFuncOneParam"
  ): TypedContractMethod<[_val: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "twoParamFuncTwoParams"
  ): TypedContractMethod<
    [_val1: BigNumberish, _val2: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AllGood"
  ): TypedContractEvent<
    AllGoodEvent.InputTuple,
    AllGoodEvent.OutputTuple,
    AllGoodEvent.OutputObject
  >;

  filters: {
    "AllGood(bool)": TypedContractEvent<
      AllGoodEvent.InputTuple,
      AllGoodEvent.OutputTuple,
      AllGoodEvent.OutputObject
    >;
    AllGood: TypedContractEvent<
      AllGoodEvent.InputTuple,
      AllGoodEvent.OutputTuple,
      AllGoodEvent.OutputObject
    >;
  };
}
