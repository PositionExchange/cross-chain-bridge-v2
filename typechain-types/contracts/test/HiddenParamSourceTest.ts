/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface HiddenParamSourceTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "callFuncNoParamsExplicit"
      | "callFuncOneParamExplicit"
      | "callFuncTwoParamsExplicit"
      | "twoParamCallFuncNoParams"
      | "twoParamCallFuncOneParam"
      | "twoParamCallFuncTwoParams"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Dump"): EventFragment;

  encodeFunctionData(
    functionFragment: "callFuncNoParamsExplicit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callFuncOneParamExplicit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callFuncTwoParamsExplicit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "twoParamCallFuncNoParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "twoParamCallFuncOneParam",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "twoParamCallFuncTwoParams",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "callFuncNoParamsExplicit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callFuncOneParamExplicit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callFuncTwoParamsExplicit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twoParamCallFuncNoParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twoParamCallFuncOneParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twoParamCallFuncTwoParams",
    data: BytesLike
  ): Result;
}

export namespace DumpEvent {
  export type InputTuple = [_b: BytesLike];
  export type OutputTuple = [_b: string];
  export interface OutputObject {
    _b: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HiddenParamSourceTest extends BaseContract {
  connect(runner?: ContractRunner | null): HiddenParamSourceTest;
  waitForDeployment(): Promise<this>;

  interface: HiddenParamSourceTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callFuncNoParamsExplicit: TypedContractMethod<[], [void], "nonpayable">;

  callFuncOneParamExplicit: TypedContractMethod<[], [void], "nonpayable">;

  callFuncTwoParamsExplicit: TypedContractMethod<[], [void], "nonpayable">;

  twoParamCallFuncNoParams: TypedContractMethod<[], [void], "nonpayable">;

  twoParamCallFuncOneParam: TypedContractMethod<[], [void], "nonpayable">;

  twoParamCallFuncTwoParams: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callFuncNoParamsExplicit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "callFuncOneParamExplicit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "callFuncTwoParamsExplicit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "twoParamCallFuncNoParams"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "twoParamCallFuncOneParam"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "twoParamCallFuncTwoParams"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Dump"
  ): TypedContractEvent<
    DumpEvent.InputTuple,
    DumpEvent.OutputTuple,
    DumpEvent.OutputObject
  >;

  filters: {
    "Dump(bytes)": TypedContractEvent<
      DumpEvent.InputTuple,
      DumpEvent.OutputTuple,
      DumpEvent.OutputObject
    >;
    Dump: TypedContractEvent<
      DumpEvent.InputTuple,
      DumpEvent.OutputTuple,
      DumpEvent.OutputObject
    >;
  };
}
