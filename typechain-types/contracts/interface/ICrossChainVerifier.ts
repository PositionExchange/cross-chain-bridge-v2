/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ICrossChainVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decodeAndVerifyEvent"
      | "getSignerList"
      | "supportedSigningAlgorithm"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decodeAndVerifyEvent",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignerList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedSigningAlgorithm",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeAndVerifyEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSignerList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedSigningAlgorithm",
    data: BytesLike
  ): Result;
}

export interface ICrossChainVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): ICrossChainVerifier;
  waitForDeployment(): Promise<this>;

  interface: ICrossChainVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decodeAndVerifyEvent: TypedContractMethod<
    [
      _blockchainId: BigNumberish,
      _eventSig: BytesLike,
      _signedEventInfo: BytesLike,
      _signature: BytesLike
    ],
    [boolean],
    "view"
  >;

  getSignerList: TypedContractMethod<
    [_blockchainId: BigNumberish],
    [string[]],
    "view"
  >;

  supportedSigningAlgorithm: TypedContractMethod<
    [_blockchainId: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decodeAndVerifyEvent"
  ): TypedContractMethod<
    [
      _blockchainId: BigNumberish,
      _eventSig: BytesLike,
      _signedEventInfo: BytesLike,
      _signature: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSignerList"
  ): TypedContractMethod<[_blockchainId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "supportedSigningAlgorithm"
  ): TypedContractMethod<[_blockchainId: BigNumberish], [bigint], "view">;

  filters: {};
}
