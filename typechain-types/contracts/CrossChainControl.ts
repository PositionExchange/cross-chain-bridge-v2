/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CrossChainControlInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addRemoteCrossChainControl"
      | "addVerifier"
      | "crossBlockchainCall"
      | "crossCallHandler"
      | "crossCallHandlerSaveGas"
      | "initialize()"
      | "initialize(uint256,uint256)"
      | "myBcId"
      | "owner"
      | "renounceOwnership"
      | "replayPrevention"
      | "timeHorizon"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CallFailure"
      | "CrossCall"
      | "Initialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addRemoteCrossChainControl",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addVerifier",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "crossBlockchainCall",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "crossCallHandler",
    values: [BigNumberish, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "crossCallHandlerSaveGas",
    values: [BigNumberish, AddressLike, BytesLike, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "myBcId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replayPrevention",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timeHorizon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRemoteCrossChainControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossBlockchainCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossCallHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossCallHandlerSaveGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "myBcId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replayPrevention",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeHorizon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CallFailureEvent {
  export type InputTuple = [txId: BytesLike, revertReason: string];
  export type OutputTuple = [txId: string, revertReason: string];
  export interface OutputObject {
    txId: string;
    revertReason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossCallEvent {
  export type InputTuple = [
    txId: BytesLike,
    timestamp: BigNumberish,
    caller: AddressLike,
    destBcId: BigNumberish,
    destContract: AddressLike,
    destFunctionCall: BytesLike
  ];
  export type OutputTuple = [
    txId: string,
    timestamp: bigint,
    caller: string,
    destBcId: bigint,
    destContract: string,
    destFunctionCall: string
  ];
  export interface OutputObject {
    txId: string;
    timestamp: bigint;
    caller: string;
    destBcId: bigint;
    destContract: string;
    destFunctionCall: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CrossChainControl extends BaseContract {
  connect(runner?: ContractRunner | null): CrossChainControl;
  waitForDeployment(): Promise<this>;

  interface: CrossChainControlInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addRemoteCrossChainControl: TypedContractMethod<
    [_blockchainId: BigNumberish, _cbc: AddressLike],
    [void],
    "nonpayable"
  >;

  addVerifier: TypedContractMethod<
    [_blockchainId: BigNumberish, _verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  crossBlockchainCall: TypedContractMethod<
    [_destBcId: BigNumberish, _destContract: AddressLike, _destData: BytesLike],
    [void],
    "nonpayable"
  >;

  crossCallHandler: TypedContractMethod<
    [
      _sourceBcId: BigNumberish,
      _cbcAddress: AddressLike,
      _eventData: BytesLike,
      _signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  crossCallHandlerSaveGas: TypedContractMethod<
    [
      _srcBcId: BigNumberish,
      _cbcAddress: AddressLike,
      _eventData: BytesLike,
      _signature: BytesLike,
      _oldTxIds: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  "initialize()": TypedContractMethod<[], [void], "nonpayable">;

  "initialize(uint256,uint256)": TypedContractMethod<
    [_myBcId: BigNumberish, _timeHorizon: BigNumberish],
    [void],
    "nonpayable"
  >;

  myBcId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  replayPrevention: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  timeHorizon: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addRemoteCrossChainControl"
  ): TypedContractMethod<
    [_blockchainId: BigNumberish, _cbc: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addVerifier"
  ): TypedContractMethod<
    [_blockchainId: BigNumberish, _verifier: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "crossBlockchainCall"
  ): TypedContractMethod<
    [_destBcId: BigNumberish, _destContract: AddressLike, _destData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "crossCallHandler"
  ): TypedContractMethod<
    [
      _sourceBcId: BigNumberish,
      _cbcAddress: AddressLike,
      _eventData: BytesLike,
      _signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "crossCallHandlerSaveGas"
  ): TypedContractMethod<
    [
      _srcBcId: BigNumberish,
      _cbcAddress: AddressLike,
      _eventData: BytesLike,
      _signature: BytesLike,
      _oldTxIds: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize(uint256,uint256)"
  ): TypedContractMethod<
    [_myBcId: BigNumberish, _timeHorizon: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "myBcId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "replayPrevention"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "timeHorizon"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CallFailure"
  ): TypedContractEvent<
    CallFailureEvent.InputTuple,
    CallFailureEvent.OutputTuple,
    CallFailureEvent.OutputObject
  >;
  getEvent(
    key: "CrossCall"
  ): TypedContractEvent<
    CrossCallEvent.InputTuple,
    CrossCallEvent.OutputTuple,
    CrossCallEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CallFailure(bytes32,string)": TypedContractEvent<
      CallFailureEvent.InputTuple,
      CallFailureEvent.OutputTuple,
      CallFailureEvent.OutputObject
    >;
    CallFailure: TypedContractEvent<
      CallFailureEvent.InputTuple,
      CallFailureEvent.OutputTuple,
      CallFailureEvent.OutputObject
    >;

    "CrossCall(bytes32,uint256,address,uint256,address,bytes)": TypedContractEvent<
      CrossCallEvent.InputTuple,
      CrossCallEvent.OutputTuple,
      CrossCallEvent.OutputObject
    >;
    CrossCall: TypedContractEvent<
      CrossCallEvent.InputTuple,
      CrossCallEvent.OutputTuple,
      CrossCallEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
