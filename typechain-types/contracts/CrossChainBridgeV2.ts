/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CrossChainBridgeV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "PAUSER_ROLE"
      | "REFUNDER_ROLE"
      | "addContractFirstMapping"
      | "getBcIdTokenMaping"
      | "getRemoteBridgeContract"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isBcIdTokenAllowed"
      | "minimumTransferAmount"
      | "myBcId"
      | "pause"
      | "paused"
      | "receiveFromOtherBlockchain"
      | "refund"
      | "remoteBridges"
      | "renounceRole"
      | "revokeRole"
      | "setTokenConfig"
      | "supportsInterface"
      | "tokenProcessMethods"
      | "transferToOtherBlockchain"
      | "unpause"
      | "updateBridgeMapping"
      | "updateCrossChainControl"
      | "updateTokenMapping"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "MigratedTo"
      | "Paused"
      | "ReceivedFrom"
      | "Refunded"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TokenMappingUpdated"
      | "TokenProcessMethodUpdated"
      | "TransferTo"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFUNDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addContractFirstMapping",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBcIdTokenMaping",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemoteBridgeContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBcIdTokenAllowed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumTransferAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "myBcId", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveFromOtherBlockchain",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remoteBridges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConfig",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenProcessMethods",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToOtherBlockchain",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateBridgeMapping",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCrossChainControl",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenMapping",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REFUNDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addContractFirstMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBcIdTokenMaping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemoteBridgeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBcIdTokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumTransferAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "myBcId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveFromOtherBlockchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remoteBridges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenProcessMethods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToOtherBlockchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBridgeMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCrossChainControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenMapping",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MigratedToEvent {
  export type InputTuple = [
    token: AddressLike,
    newContract: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    newContract: string,
    amount: bigint
  ];
  export interface OutputObject {
    token: string;
    newContract: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedFromEvent {
  export type InputTuple = [
    srcBcId: BigNumberish,
    srcToken: AddressLike,
    destToken: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    srcBcId: bigint,
    srcToken: string,
    destToken: string,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    srcBcId: bigint;
    srcToken: string;
    destToken: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundedEvent {
  export type InputTuple = [
    token: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, recipient: string, amount: bigint];
  export interface OutputObject {
    token: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenMappingUpdatedEvent {
  export type InputTuple = [
    srcToken: AddressLike,
    destBcId: BigNumberish,
    destToken: AddressLike
  ];
  export type OutputTuple = [
    srcToken: string,
    destBcId: bigint,
    destToken: string
  ];
  export interface OutputObject {
    srcToken: string;
    destBcId: bigint;
    destToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenProcessMethodUpdatedEvent {
  export type InputTuple = [srcToken: AddressLike, processMethod: BigNumberish];
  export type OutputTuple = [srcToken: string, processMethod: bigint];
  export interface OutputObject {
    srcToken: string;
    processMethod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferToEvent {
  export type InputTuple = [
    srcBcId: BigNumberish,
    destBcId: BigNumberish,
    srcToken: AddressLike,
    destToken: AddressLike,
    sender: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    srcBcId: bigint,
    destBcId: bigint,
    srcToken: string,
    destToken: string,
    sender: string,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    srcBcId: bigint;
    destBcId: bigint;
    srcToken: string;
    destToken: string;
    sender: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CrossChainBridgeV2 extends BaseContract {
  connect(runner?: ContractRunner | null): CrossChainBridgeV2;
  waitForDeployment(): Promise<this>;

  interface: CrossChainBridgeV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  REFUNDER_ROLE: TypedContractMethod<[], [string], "view">;

  addContractFirstMapping: TypedContractMethod<
    [
      _srcToken: AddressLike,
      _destBcId: BigNumberish,
      _destToken: AddressLike,
      _processMethod: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getBcIdTokenMaping: TypedContractMethod<
    [_bcId: BigNumberish, _token: AddressLike],
    [string],
    "view"
  >;

  getRemoteBridgeContract: TypedContractMethod<
    [_bcId: BigNumberish],
    [string],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_crossChainBridge: AddressLike],
    [void],
    "nonpayable"
  >;

  isBcIdTokenAllowed: TypedContractMethod<
    [_bcId: BigNumberish, _token: AddressLike],
    [boolean],
    "view"
  >;

  minimumTransferAmount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  myBcId: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  receiveFromOtherBlockchain: TypedContractMethod<
    [_destToken: AddressLike, _recipient: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  refund: TypedContractMethod<
    [_token: AddressLike, _recipient: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  remoteBridges: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenConfig: TypedContractMethod<
    [_srcToken: AddressLike, _processMethod: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenProcessMethods: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  transferToOtherBlockchain: TypedContractMethod<
    [
      _destBcId: BigNumberish,
      _srcToken: AddressLike,
      _recipient: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateBridgeMapping: TypedContractMethod<
    [_destBcId: BigNumberish, _destBridge: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCrossChainControl: TypedContractMethod<
    [_crossChainControl: AddressLike],
    [void],
    "nonpayable"
  >;

  updateTokenMapping: TypedContractMethod<
    [_srcToken: AddressLike, _destBcId: BigNumberish, _destToken: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REFUNDER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addContractFirstMapping"
  ): TypedContractMethod<
    [
      _srcToken: AddressLike,
      _destBcId: BigNumberish,
      _destToken: AddressLike,
      _processMethod: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBcIdTokenMaping"
  ): TypedContractMethod<
    [_bcId: BigNumberish, _token: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRemoteBridgeContract"
  ): TypedContractMethod<[_bcId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_crossChainBridge: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isBcIdTokenAllowed"
  ): TypedContractMethod<
    [_bcId: BigNumberish, _token: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "minimumTransferAmount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "myBcId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "receiveFromOtherBlockchain"
  ): TypedContractMethod<
    [_destToken: AddressLike, _recipient: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<
    [_token: AddressLike, _recipient: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remoteBridges"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenConfig"
  ): TypedContractMethod<
    [_srcToken: AddressLike, _processMethod: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenProcessMethods"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferToOtherBlockchain"
  ): TypedContractMethod<
    [
      _destBcId: BigNumberish,
      _srcToken: AddressLike,
      _recipient: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBridgeMapping"
  ): TypedContractMethod<
    [_destBcId: BigNumberish, _destBridge: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCrossChainControl"
  ): TypedContractMethod<
    [_crossChainControl: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTokenMapping"
  ): TypedContractMethod<
    [_srcToken: AddressLike, _destBcId: BigNumberish, _destToken: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MigratedTo"
  ): TypedContractEvent<
    MigratedToEvent.InputTuple,
    MigratedToEvent.OutputTuple,
    MigratedToEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedFrom"
  ): TypedContractEvent<
    ReceivedFromEvent.InputTuple,
    ReceivedFromEvent.OutputTuple,
    ReceivedFromEvent.OutputObject
  >;
  getEvent(
    key: "Refunded"
  ): TypedContractEvent<
    RefundedEvent.InputTuple,
    RefundedEvent.OutputTuple,
    RefundedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TokenMappingUpdated"
  ): TypedContractEvent<
    TokenMappingUpdatedEvent.InputTuple,
    TokenMappingUpdatedEvent.OutputTuple,
    TokenMappingUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenProcessMethodUpdated"
  ): TypedContractEvent<
    TokenProcessMethodUpdatedEvent.InputTuple,
    TokenProcessMethodUpdatedEvent.OutputTuple,
    TokenProcessMethodUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TransferTo"
  ): TypedContractEvent<
    TransferToEvent.InputTuple,
    TransferToEvent.OutputTuple,
    TransferToEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MigratedTo(address,address,uint256)": TypedContractEvent<
      MigratedToEvent.InputTuple,
      MigratedToEvent.OutputTuple,
      MigratedToEvent.OutputObject
    >;
    MigratedTo: TypedContractEvent<
      MigratedToEvent.InputTuple,
      MigratedToEvent.OutputTuple,
      MigratedToEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReceivedFrom(uint256,address,address,address,uint256)": TypedContractEvent<
      ReceivedFromEvent.InputTuple,
      ReceivedFromEvent.OutputTuple,
      ReceivedFromEvent.OutputObject
    >;
    ReceivedFrom: TypedContractEvent<
      ReceivedFromEvent.InputTuple,
      ReceivedFromEvent.OutputTuple,
      ReceivedFromEvent.OutputObject
    >;

    "Refunded(address,address,uint256)": TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
    Refunded: TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TokenMappingUpdated(address,uint256,address)": TypedContractEvent<
      TokenMappingUpdatedEvent.InputTuple,
      TokenMappingUpdatedEvent.OutputTuple,
      TokenMappingUpdatedEvent.OutputObject
    >;
    TokenMappingUpdated: TypedContractEvent<
      TokenMappingUpdatedEvent.InputTuple,
      TokenMappingUpdatedEvent.OutputTuple,
      TokenMappingUpdatedEvent.OutputObject
    >;

    "TokenProcessMethodUpdated(address,uint8)": TypedContractEvent<
      TokenProcessMethodUpdatedEvent.InputTuple,
      TokenProcessMethodUpdatedEvent.OutputTuple,
      TokenProcessMethodUpdatedEvent.OutputObject
    >;
    TokenProcessMethodUpdated: TypedContractEvent<
      TokenProcessMethodUpdatedEvent.InputTuple,
      TokenProcessMethodUpdatedEvent.OutputTuple,
      TokenProcessMethodUpdatedEvent.OutputObject
    >;

    "TransferTo(uint256,uint256,address,address,address,address,uint256)": TypedContractEvent<
      TransferToEvent.InputTuple,
      TransferToEvent.OutputTuple,
      TransferToEvent.OutputObject
    >;
    TransferTo: TypedContractEvent<
      TransferToEvent.InputTuple,
      TransferToEvent.OutputTuple,
      TransferToEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
